import Agent from "./Agent";
import RPCClient from "./RPCClient";
import { AgentConfig, LogLevel } from "./types";
import TypedEventEmitter from "./utils/TypedEventEmitter";
import { Logger, createLogger, format, transports } from 'winston';

const logger: Logger = global.APM_AGENT_LOGGER || createLogger({
    level: 'info',
    format: format.combine(
        format.timestamp({
            format: '[YYYY-MM-DD HH:mm:ss]'
        }),
        format.errors({ stack: true }),
        format.splat(),
        format.json()
    ),
    defaultMeta: { service: 'your-service-name' },
    transports: [
        //
        // - Write to all logs with level `info` and below to `quick-start-combined.log`.
        // - Write all logs error (and below) to `quick-start-error.log`.
        //
        transports.Console,
        new transports.File({ filename: 'quick-start-error.log', level: 'error' }),
        new transports.File({ filename: 'quick-start-combined.log' })
    ]
});

const trace = (level: LogLevel): (...rest: any[]) => void => {
    const func = level.toLowerCase();
    return (...rest: any[]) => {
        logger[func].apply(logger, rest);
    }
}

console.log = trace('INFO');
console.warn = trace('WARN');
console.error = trace('ERROR');

export default class LoggingCollector extends TypedEventEmitter {

    private agent: Agent;

    private timer: NodeJS.Timer;

    get config(): AgentConfig {
        return this.agent.getConfig();
    }

    constructor(agent: Agent) {
        super();
        this.agent = agent;
    }

    public start() {
        this.process();
    }

    private process() {
        this.stopProcess();
        
    }

    private stopProcess() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = undefined;
        }
    }

    dispose() {
        this.stopProcess();
    }
}
